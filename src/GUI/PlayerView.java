/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Model.CultistPlayer;
import Model.Napakalaki;
import Model.Player;
import Model.Treasure;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JPanel;

/**
 * Clase que representa la vista gráfica del jugador dentro del juego. Mantiene
 * toda la información del jugador que en ese momento tiene el turno: su nivel,
 * su nivel de combate, los tesoros ocultos y visibles que tiene, y si es un 
 * jugador normal o sectario
 * @author Francisco Luque y Antonio Moya
 */
public class PlayerView extends javax.swing.JPanel {

    /**
     * Creates new form PlayerView
     */
    public PlayerView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        name = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        level = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        buyLevels = new javax.swing.JButton();
        makeVisible = new javax.swing.JButton();
        discardTreasures = new javax.swing.JButton();
        combatLevel = new javax.swing.JLabel();
        CultistLabel = new javax.swing.JLabel();
        bonusLevelMessage = new javax.swing.JLabel();
        bonusLevel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        visibleTreasures = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        hiddenTreasures = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Player"));

        name.setText("Name");

        jLabel1.setText("Nivel:");

        level.setText("level");

        jLabel2.setText("Nivel de combate:");

        buyLevels.setText("Buy levels");
        buyLevels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyLevelsActionPerformed(evt);
            }
        });

        makeVisible.setText("Equip treasure");
        makeVisible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeVisibleActionPerformed(evt);
            }
        });

        discardTreasures.setText("Discard Treasures");
        discardTreasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardTreasuresActionPerformed(evt);
            }
        });

        combatLevel.setText("combatLevel");

        CultistLabel.setText("JUGADOR SECTARIO");

        bonusLevelMessage.setText("Bonus de nivel por sectarios en juego:");

        bonusLevel.setText("bonusLevel");

        visibleTreasures.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Visible treasures", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        visibleTreasures.setToolTipText("Visible Treasures");
        visibleTreasures.setMaximumSize(new java.awt.Dimension(710, 230));
        visibleTreasures.setMinimumSize(new java.awt.Dimension(710, 230));
        visibleTreasures.setName("Visible Treasures"); // NOI18N
        jScrollPane1.setViewportView(visibleTreasures);
        visibleTreasures.getAccessibleContext().setAccessibleName("Visible Treasures");

        hiddenTreasures.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hidden treasures", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        hiddenTreasures.setToolTipText("Hidden Treasures");
        hiddenTreasures.setMaximumSize(new java.awt.Dimension(710, 230));
        hiddenTreasures.setMinimumSize(new java.awt.Dimension(710, 230));
        jScrollPane2.setViewportView(hiddenTreasures);
        hiddenTreasures.getAccessibleContext().setAccessibleName("Hidden Treasures");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(176, 176, 176)
                .addComponent(name)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CultistLabel)
                .addGap(187, 187, 187))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buyLevels)
                        .addGap(222, 222, 222)
                        .addComponent(makeVisible)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(discardTreasures))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(level))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(combatLevel)))
                                .addGap(36, 36, 36)
                                .addComponent(bonusLevelMessage)
                                .addGap(51, 51, 51)
                                .addComponent(bonusLevel)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name)
                    .addComponent(CultistLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(level)
                    .addComponent(bonusLevelMessage)
                    .addComponent(bonusLevel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(combatLevel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(makeVisible)
                    .addComponent(buyLevels)
                    .addComponent(discardTreasures))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que gestiona el funcionamiento del botón que permite hacer visibles
     * tesoros que el jugador tenga ocultos
     * @param evt Evento de ratón (click)
     */
    private void makeVisibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeVisibleActionPerformed
        // Se crea un vector con los tesoros ocultos que están seleccionados
        ArrayList <Treasure> selHidden = this.getSelectedTreasures(this.hiddenTreasures);
        
        // Se intentan hacer visibles dichos tesoros seleccionados
        for (Treasure t: selHidden){
            this.napakalakiModel.makeTreasureVisible(t);
        }
        
        // Se actualiza la vista gráfica del jugador
        this.setPlayer(this.napakalakiModel.getCurrentPlayer());
        
        // Se vuelve a pintar el jugador
        this.repaint();
    }//GEN-LAST:event_makeVisibleActionPerformed

    /**
     * Método que gestiona el funcionamiento del botón que permite comprar niveles
     * @param evt Evento del ratón (click)
     */
    private void buyLevelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyLevelsActionPerformed
        // Se introducen en dos arrays los tesoros seleccionados de ambos paneles,
        // tanto visibles como ocultos
        ArrayList <Treasure> selHidden = this.getSelectedTreasures(this.hiddenTreasures);
        ArrayList <Treasure> selVisible = this.getSelectedTreasures(this.visibleTreasures);
        
        // Se intentan comprar los niveles
        this.playerModel.buyLevels(selVisible, selHidden);
        
        // Se vuelven a rellenar los paneles de tesoros del jugador
        this.fillTreasurePanel(this.hiddenTreasures, this.playerModel.getHiddenTreasures());
        this.fillTreasurePanel(this.visibleTreasures, this.playerModel.getVisibleTreasures());
        
        // Se actualiza la vista del jugador
        this.setPlayer(this.playerModel);
        
        // Se vuelve a pintar dicha vista
        this.repaint();
    }//GEN-LAST:event_buyLevelsActionPerformed

    /**
     * Método que gestiona el funcionamiento del botón que permite al jugador
     * descartar tesoros
     * @param evt Evento de ratón (click)
     */
    private void discardTreasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardTreasuresActionPerformed
        
        // Se introducen en dos arrays los elementos seleccionados de ambos paneles
        ArrayList <Treasure> selHidden = this.getSelectedTreasures(this.hiddenTreasures);
        ArrayList <Treasure> selVisible = this.getSelectedTreasures(this.visibleTreasures);
        
        // Se descartan los tesoros ocultos
        for (Treasure t: selHidden){
            this.playerModel.discardHiddenTreasure(t);
        }
        
        // Se descartan los tesoros visibles
        for (Treasure t: selVisible){
            this.playerModel.discardVisibleTreasure(t);
        }
        
        // Se actualiza y se vuelve a pintar la vista del jugador
        this.setPlayer(this.napakalakiModel.getCurrentPlayer());
        repaint();
    }//GEN-LAST:event_discardTreasuresActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CultistLabel;
    private javax.swing.JLabel bonusLevel;
    private javax.swing.JLabel bonusLevelMessage;
    private javax.swing.JButton buyLevels;
    private javax.swing.JLabel combatLevel;
    private javax.swing.JButton discardTreasures;
    private javax.swing.JPanel hiddenTreasures;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel level;
    private javax.swing.JButton makeVisible;
    private javax.swing.JLabel name;
    private javax.swing.JPanel visibleTreasures;
    // End of variables declaration//GEN-END:variables
    private Player playerModel;
    private Napakalaki napakalakiModel;
    
    /**
     * Método que asigna un jugador la a vista y la actualiza
     * @param player Jugador que se asigna a la vista
     */
    public void setPlayer(Player player){
        
        // Se asigna el jugador a la vista a través de una variable
        this.playerModel = player;
        
        // Se le asigna valor a las etiquetas de nombre del jugador, nivel de juego
        // y nivel de combate
        this.name.setText(this.playerModel.getName());
        this.level.setText(Integer.toString(this.playerModel.getLevel()));
        this.combatLevel.setText(Integer.toString(this.playerModel.getCombatLevel()));
        
        // Se rellenan los paneles de tesoros visibles y ocultos
        fillTreasurePanel(this.visibleTreasures, playerModel.getVisibleTreasures());
        fillTreasurePanel(this.hiddenTreasures, playerModel.getHiddenTreasures());
        
        // Si el jugador es sectario:
        if(this.playerModel.isCultist()){
            // Se muestran los mensajes de que es sectario y los niveles que obtiene
            // por ello
            this.CultistLabel.setVisible(true);
            this.bonusLevelMessage.setVisible(true);
            this.bonusLevel.setVisible(true);
            this.bonusLevel.setText(Integer.toString(((CultistPlayer)this.playerModel).getBonusLevel()));
        }
        // Si no lo es:
        else{
            // Se ocultan dichas etiquetas
            this.CultistLabel.setVisible(false);
            this.bonusLevelMessage.setVisible(false);
            this.bonusLevel.setVisible(false);
        }
        
        // Se vuelve a pintar 
        repaint();
        revalidate();
    }
    
    /**
     * Método que asigna al jugador la instancia del juego
     * @param napakalaki Instancia del juego a asignar
     */
    public void setNapakalaki(Napakalaki napakalaki){
        this.napakalakiModel = napakalaki;
    }
    
    /**
     * Método que rellena un panel con vistas de tesoros. Sirve para rellenar
     * los paneles de tesoros visibles y ocultos que tiene el jugador
     * @param aPanel Panel que se va a rellenar
     * @param aList Array con los elementos que se quieren introducir en el panel
     */
    public void fillTreasurePanel (JPanel aPanel, ArrayList<Treasure> aList) {
        // Se elimina la información antigua
        aPanel.removeAll();
        // Se recorre la lista de tesoros construyendo y añadiendo sus vistas
        // al panel
        for (Treasure t : aList) {
            TreasureView aTreasureView = new TreasureView();
            aTreasureView.setTreasure (t);
            aTreasureView.setVisible (true);
            aPanel.add(aTreasureView);
        }
        // Se fuerza la actualización visual del panel
        aPanel.repaint();
        aPanel.revalidate();
    }
    
    /**
     * Método que permite introducir en un Array los elementos que estén seleccionados
     * dentro de un panel. Se utiliza para capturar en un Array los elementos que 
     * el jugador tiene seleccionados dentro de su panel.
     * @param aPanel Panel del que se quieren seleccionar los elementos
     * @return ArrayList con los tesoros que había seleccionados en el panel
     */
    public ArrayList<Treasure> getSelectedTreasures(JPanel aPanel) {
        
        // Vista de tesoro que se utiliza para seleccionar los elementos del panel
        TreasureView tv;
        
        // Array que se va a devolver
        ArrayList<Treasure> output = new ArrayList();
        
        // Se recorren los elementos que pertenecen al panel
        for (Component c : aPanel.getComponents()) {
            
            // Cada componente se interpreta como vista de tesoro
            tv = (TreasureView) c;
            
            // Si dicho elemento está seleccionado, se introduce en el array el
            // Treasure que representa dicha vista
            if ( tv.isSelected() )
                output.add ( tv.getTreasure() );
        }

        return output;
    }
    
    /**
     * Método que permite activar o desactivar el botón que permite convertir
     * en visibles tesoros que el jugador tiene ocultos. Sirve para poder activar
     * o desactivar la funcionalidad del jugador dependiendo del momento del turno
     * del jugador en el que nos encontremos
     * @param flag Boolean que nos indica si se activa el botón (true) o se 
     * desactiva (false)
     */
    public void setEnabledMakeVisibleButton(boolean flag){
        this.makeVisible.setEnabled(flag);
    }
    
    /**
     * Método que permite activar o desactivar el botón que permite al jugador
     * comprar niveles. Sirve para poder activar o desactivar la funcionalidad 
     * del jugador dependiendo del momento del turno en el que nos encontremos
     * @param flag Boolean que nos indica si se activa el botón (true) o se 
     * desactiva (false)
     */
    public void setEnabledBuyLevelsButton(boolean flag){
        this.buyLevels.setEnabled(flag);
    }
    
    /**
     * Método que permite activar o desactivar el botón que permite al jugador
     * descartar tesoros. Sirve para poder activar o desactivar la funcionalidad 
     * del jugador dependiendo del momento del turno en el que nos encontremos
     * @param flag Boolean que nos indica si se activa el botón (true) o se 
     * desactiva (false)
     */
    public void setEnabledDiscardTreasuresButton(boolean flag){
        this.discardTreasures.setEnabled(flag);
    }
}
