/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Model.Monster;
import Model.Player;

/**
 * Vista de las cartas de monstruos del juego. Presenta en una vista gráfica toda
 * la información relativa a los monstruos que aparecen en el juego. Informa sobre
 * su nivel de combate, el tesoro que se obtiene al vencerlos, y el mal rollo que
 * se aplica al jugador si pierde el combate
 * @author Francisco Luque y Antonio Moya
 */
public class MonsterView extends javax.swing.JPanel {

    /**
     * Método que inicializa la vista
     */
    public MonsterView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        level = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        prizeView = new GUI.PrizeView();
        jLabel5 = new javax.swing.JLabel();
        badConsequenceView = new GUI.BadConsequenceView();

        jLabel4.setText("jLabel4");

        setBorder(javax.swing.BorderFactory.createTitledBorder("Monster"));

        name.setText("name");

        jLabel2.setText("Nivel:");

        level.setText("level");

        jLabel3.setText("Premio:");

        jLabel5.setText("Mal rollo:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(level))
                                .addComponent(prizeView, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(badConsequenceView, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                    .addComponent(name, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(name)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(level))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prizeView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(badConsequenceView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private GUI.BadConsequenceView badConsequenceView;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel level;
    private javax.swing.JLabel name;
    private GUI.PrizeView prizeView;
    // End of variables declaration//GEN-END:variables

    private Monster monsterModel;
    
    /**
     * Método que introduce al monstruo dentro de su vista gráfica. Inicializa 
     * las distintas etiquetas de la vista para que muestren la información del
     * monstruo actual
     * @param monster Monstruo que se quiere mostrar en pantalla
     */
    public void setMonster(Monster monster){
        // Asignar a una variable de tipo monstruo el monstruo a representar
        this.monsterModel = monster;
        
        // Asignar valores a las etiquetas del nivel y el nombre del monstruo
        this.level.setText(Integer.toString(this.monsterModel.getBasicValue()));
        this.name.setText(this.monsterModel.getName());
        
        // Inicializar la vista gráfica del tesoro asociado al montruo
        this.prizeView.setPrize(this.monsterModel.getPrize());
        
        // Inicializar la vista gráfica del mal rollo asociado al montruo
        this.badConsequenceView.setBadConsequenceView(this.monsterModel.getBadConsequence());
        
        // Se actualiza el valor del monstruo en la vista gráfica
        repaint();
    }
    
    /**
     * Método que permite cambiar el valor del nivel del monstruo dependiendo de
     * su oponente. Este método es necesario dado que el nivel de los monstruos 
     * puede variar dependiendo de si el oponente es o no sectario
     * @param opponent Jugador que pelea contra el monstruo
     */
    public void setLevelDisplay(Player opponent){
        this.level.setText(Integer.toString(opponent.getOponentLevel(this.monsterModel)));
        repaint();
    }
}
